// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateOrRenewAnOauthTokenRequestBodyGrantType - Whether an OAuth grant code or a refresh token is being exchanged for an OAuth token
type CreateOrRenewAnOauthTokenRequestBodyGrantType string

const (
	CreateOrRenewAnOauthTokenRequestBodyGrantTypeAuthorizationCode CreateOrRenewAnOauthTokenRequestBodyGrantType = "authorization_code"
	CreateOrRenewAnOauthTokenRequestBodyGrantTypeRefreshToken      CreateOrRenewAnOauthTokenRequestBodyGrantType = "refresh_token"
)

func (e CreateOrRenewAnOauthTokenRequestBodyGrantType) ToPointer() *CreateOrRenewAnOauthTokenRequestBodyGrantType {
	return &e
}

func (e *CreateOrRenewAnOauthTokenRequestBodyGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "refresh_token":
		*e = CreateOrRenewAnOauthTokenRequestBodyGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrRenewAnOauthTokenRequestBodyGrantType: %v", v)
	}
}

type CreateOrRenewAnOauthTokenRequestBody struct {
	// The OAuth application's client ID
	ClientID string `json:"client_id"`
	// The OAuth applicatin's client secret
	ClientSecret string `json:"client_secret"`
	// The OAuth grant code provided to your OAuth application's redirect URI. Required when grant_type is authorization_code
	Code *string `json:"code,omitempty"`
	// Whether an OAuth grant code or a refresh token is being exchanged for an OAuth token
	GrantType CreateOrRenewAnOauthTokenRequestBodyGrantType `json:"grant_type"`
	// The OAuth application's redirect URI. Required when grant_type is authorization_code
	RedirectURI *string `json:"redirect_uri,omitempty"`
	// The refresh token from the original OAuth token grant. Required when grant_type is refresh_token
	RefreshToken *string `json:"refresh_token,omitempty"`
}

type CreateOrRenewAnOauthTokenRequest struct {
	// The ID of the OAuth application
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The name of the organization the OAuth application belongs to
	Organization string                                `pathParam:"style=simple,explode=false,name=organization"`
	RequestBody  *CreateOrRenewAnOauthTokenRequestBody `request:"mediaType=application/json"`
}

type CreateOrRenewAnOauthTokenResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns the created OAuth token
	CreateOrRenewAnOauthToken200ApplicationJSONObject map[string]map[string]interface{}
}
